<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Upflux-WebService</name>
    </assembly>
    <members>
        <member name="T:Upflux_WebService.Controllers.AuthController">
            <summary>
            Authentication related Controllers
            </summary>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.#ctor(Upflux_WebService.Services.Interfaces.IAuthService)">
            <summary>
            Constructor
            </summary>
            <param name="authService"></param>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.AdminLogin(Upflux_WebService.Core.DTOs.AdminLoginRequest)">
            <summary>
            Admin login
            </summary>
            <remarks>
            This endpoint allows an admin to log in by providing email and password. Upon successful authentication,
            a JWT token is generated and returned. The token is required for further API requests that need admin privileges.
            </remarks>
            <param name="request">The login request containing email and password</param>
            <returns>Returns a token if login is successful, or error messages if validation fails.</returns>
            <response code="200">Successful login and token generation</response>
            <response code="400">Bad Request if email or password are empty or missing</response>
            <response code="401">Unauthorized if the provided credentials are incorrect</response>
            <response code="500">Internal Server Error in case of unexpected errors</response>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.ChangeAdminPassword(Upflux_WebService.Core.DTOs.ChangePasswordRequest)">
            <summary>
            Admin password change
            </summary>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.CreateEngineerToken(Upflux_WebService.Core.DTOs.EngineerTokenRequest)">
            <summary>
            Admin creates a token for an engineer
            </summary>
            <remarks>
            This endpoint allows an admin to create a new token for an engineer, granting them access to specified machines and Application.
            The admin must be authenticated with the appropriate role to perform this operation.
            </remarks>
            <param name="request">The request containing the engineer's email and list of machine IDs</param>
            <returns>Returns the engineer's token if creation is successful, or error messages if validation fails.</returns>
            <response code="200">Token successfully created for the engineer</response>
            <response code="400">Bad Request if the engineer's email or machine IDs are missing or invalid</response>
            <response code="401">Unauthorized if the admin token is invalid or the admin does not have the correct role</response>
            <response code="500">Internal Server Error in case of unexpected errors</response>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.EngineerLogin(Upflux_WebService.Core.DTOs.EngineerLoginRequest)">
            <summary>
            Engineer login
            </summary>
            <remarks>
            This endpoint allows an engineer to log in by providing their email and an engineer token. 
            The engineer token is parsed and validated, and if valid, a new authorization token is generated 
            for the engineer with access to the specified machines.
            </remarks>
            <param name="request">The login request containing the engineer's email and token</param>
            <returns>Returns a new authorization token if login and validation are successful, or error messages if validation fails.</returns>
            <response code="200">Successful login and token generation for the engineer</response>
            <response code="400">Bad Request if email or token are missing or invalid</response>
            <response code="401">Unauthorized if the token is invalid, email mismatch, or missing machine IDs in the token</response>
            <response code="500">Internal Server Error in case of unexpected errors</response>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.GetAccessibleMachines">
            <summary>
            Engineer retrieves accessible machines
            </summary>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.ParseToken(System.String)">
            <summary>
            Parse and verify a token
            </summary>
        </member>
        <member name="M:Upflux_WebService.Controllers.AuthController.SharedEndpoint">
            <summary>
            Shared endpoint for Admin and Engineer roles
            </summary>
        </member>
        <member name="T:Upflux_WebService.Core.DTOs.AdminLoginRequest">
            <summary>
            Represents the request data for admin login.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.AdminLoginRequest.Email">
            <summary>
            Gets or sets the admin's email address.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.AdminLoginRequest.Password">
            <summary>
            Gets or sets the admin's password.
            </summary>
        </member>
        <member name="T:Upflux_WebService.Core.DTOs.ChangePasswordRequest">
            <summary>
            Request DTO for password change
            </summary>
        </member>
        <member name="T:Upflux_WebService.Core.DTOs.EngineerTokenRequest">
            <summary>
            Represents the request data for generating a token for an engineer.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.EngineerTokenRequest.EngineerEmail">
            <summary>
            Gets or sets the email address of the engineer.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.EngineerTokenRequest.EngineerName">
            <summary>
            Gets or sets the name of the engineer.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.EngineerTokenRequest.MachineIds">
            <summary>
            Gets or sets the list of machine IDs that the engineer will have access to.
            </summary>
        </member>
        <member name="T:Upflux_WebService.Core.DTOs.EngineerLoginRequest">
            <summary>
            Represents the request data for engineer login, including the email and engineer token.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.EngineerLoginRequest.Email">
            <summary>
            Gets or sets the email address of the engineer.
            </summary>
        </member>
        <member name="P:Upflux_WebService.Core.DTOs.EngineerLoginRequest.EngineerToken">
            <summary>
            Gets or sets the token associated with the engineer, which is used for authentication.
            </summary>
        </member>
        <member name="T:Upflux_WebService.Services.AuthService">
            <summary>
            Service that deals with Authenication related methods
            </summary>
        </member>
        <member name="M:Upflux_WebService.Services.AuthService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Upflux_WebService.Services.AuthService.AdminLogin(System.String,System.String)">
            <summary>
            Authenticates an admin user and generates a token.
            </summary>
            <param name="email">The email address of the admin.</param>
            <param name="password">The password of the admin (should be hashed).</param>
            <returns>A JWT token for the admin if authentication is successful.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the provided credentials are invalid.</exception>
            <remarks>
            This method verifies the admin's credentials (email and password). If the credentials are valid, a JWT token is generated and returned.
            The token will allow the admin to access authorized resources within the application.
            </remarks>
        </member>
        <member name="M:Upflux_WebService.Services.AuthService.ChangeAdminPassword(System.String,System.String,System.String)">
            <summary>
            Changes the password for an admin user.
            </summary>
            <param name="email">The email address of the admin.</param>
            <param name="oldPassword">The current (old) password of the admin (hashed).</param>
            <param name="newPassword">The new password to be set for the admin (hashed).</param>
            <returns>True if the password was successfully changed, otherwise false.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the admin is not found.</exception>
            <remarks>
            This method checks if the admin exists and if the old password matches the stored password.
            If both conditions are met, the password is updated with the new password (proper hashing should be applied to the new password). 
            If the old password is incorrect or the admin is not found, the operation will fail.
            </remarks>
        </member>
        <member name="M:Upflux_WebService.Services.AuthService.EngineerLogin(System.String)">
            <summary>
            Authenticates an engineer based on the provided email and retrieves the list of machine IDs they have access to.
            </summary>
            <param name="email">The email address of the engineer.</param>
            <returns>A list of machine IDs the engineer has access to.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the engineer with the provided email is not found.</exception>
            <remarks>
            This method verifies if the engineer exists by checking the provided email. If found, it returns a list of machine IDs that the engineer is authorized to access.
            If the engineer is not found, an exception is thrown indicating invalid credentials.
            </remarks>
        </member>
        <member name="M:Upflux_WebService.Services.AuthService.GenerateEngineerToken(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Generates a token for an engineer, either by creating a new engineer or updating an existing one with new machine access.
            </summary>
            <param name="engineerEmail">The email address of the engineer.</param>
            <param name="machineIds">A list of machine IDs the engineer has access to.</param>
            <param name="engineerName">The name of the engineer (optional, defaults to "Engineer").</param>
            <returns>A JWT token for the engineer granting access to the specified machines.</returns>
            <remarks>
            This method checks if an engineer with the specified email already exists. If the engineer does not exist, a new entry is added to the list. 
            If the engineer already exists, their machine IDs are updated. After ensuring the engineer’s details are up-to-date, a token is generated and returned.
            The generated token allows the engineer to access the specified machines.
            </remarks>
        </member>
        <member name="M:Upflux_WebService.Services.AuthService.ParseToken(System.String)">
            <summary>
            Parses a JWT token and extracts its claims into a dictionary.
            </summary>
            <param name="token">The JWT token to be parsed.</param>
            <returns>A dictionary containing the claims, where the key is the claim type and the value is the claim value.</returns>
            <remarks>
            This method takes a JWT token, reads and parses it, and returns a dictionary with the claim types as keys and the corresponding values.
            This can be used to retrieve specific information from the token, such as user email, roles, or any custom claims stored in the token.
            </remarks>
        </member>
        <member name="T:Upflux_WebService.Services.Interfaces.IAuthService">
            <summary>
            Interface for authentication-related services.
            </summary>
        </member>
        <member name="M:Upflux_WebService.Services.Interfaces.IAuthService.AdminLogin(System.String,System.String)">
            <summary>
            Authenticates an admin and generates a token.
            </summary>
            <param name="email">The admin's email address.</param>
            <param name="password">The admin's password.</param>
            <returns>A JWT token for the authenticated admin.</returns>
        </member>
        <member name="M:Upflux_WebService.Services.Interfaces.IAuthService.EngineerLogin(System.String)">
            <summary>
            Authenticates an engineer by email and retrieves machine access information.
            </summary>
            <param name="email">The engineer's email address.</param>
            <returns>A list of machine IDs the engineer has access to.</returns>
        </member>
        <member name="M:Upflux_WebService.Services.Interfaces.IAuthService.GenerateEngineerToken(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Generates a new token for an engineer with specified machine access.
            </summary>
            <param name="engineerEmail">The email address of the engineer.</param>
            <param name="machineIds">The list of machine IDs the engineer will have access to.</param>
            <param name="engineerName">Optional engineer's name, default is "Engineer".</param>
            <returns>A JWT token for the engineer with machine access information.</returns>
        </member>
        <member name="M:Upflux_WebService.Services.Interfaces.IAuthService.ParseToken(System.String)">
            <summary>
            Parses a JWT token and extracts the claims as a dictionary.
            </summary>
            <param name="token">The JWT token to parse.</param>
            <returns>A dictionary containing the claims from the token.</returns>
        </member>
        <member name="M:Upflux_WebService.Services.Interfaces.IAuthService.ChangeAdminPassword(System.String,System.String,System.String)">
            <summary>
            Changes the password for an admin user.
            </summary>
            <param name="email">The admin's email address.</param>
            <param name="oldPassword">The current password of the admin.</param>
            <param name="newPassword">The new password to be set for the admin.</param>
            <returns>Returns <c>true</c> if the password change was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UserBase.#ctor(System.Guid,System.String,System.String,Upflux_WebService.Core.Models.Enums.Role)">
            <summary>
            Constructor 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="email"></param>
            <param name="userRole"></param>
        </member>
    </members>
</doc>
